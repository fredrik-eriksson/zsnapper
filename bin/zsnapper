#!/usr/bin/env python

import datetime
import os
import re
import logging
import logging.handlers
import subprocess
import sys

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

from string import Template

import zsnaplib

LOGGER = 'zsnapper'

RET_CODES = {
        'SUCCESS': 0,
        'ERROR': 1,
        'FAILED': 2
        }

DEFAULT_CONFIG = {
        'snapshot_interval': None,
        'custom_keep_interval': None,
        'weed_enable': False,
        'keep_yearly': 0,
        'keep_monthly': 0,
        'keep_weekly': 0,
        'keep_daily': 0,
        'keep_hourly': 0,
        'keep_30min': 0,
        'keep_15min': 0,
        'keep_5min': 0,
        'keep_1min': 0,
        'keep_custom': 0,
        'remote_enable': False,
        'remote_send_flags': '',
        'remote_recv_flags': '',
        'remote_zfs_cmd': None,
        'remote_test_cmd': None,
        'remote_zfs_target': None,
        }

timedelta_regex = re.compile('([0-9]+)([dhm])')

def remote_is_available(conf):
    log = logging.getLogger(LOGGER)
    cmdstr = Template(conf['remote_test_cmd']).safe_substitute(conf)
    cmd = cmdstr.split()
    proc = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
    (out, err) = proc.communicate()

    log.info('Healthcheck "{}" returned {}'.format(cmdstr, proc.returncode))
    return proc.returncode == 0


def str_to_timedelta(deltastr):

    delta = datetime.timedelta()
    for match in timedelta_regex.finditer(deltastr):
        if match.group(2) == 'd':
            delta += datetime.timedelta(days=int(match.group(1)))
        elif match.group(2) == 'h':
            delta += datetime.timedelta(hours=int(match.group(1)))
        elif match.group(2) == 'm':
            delta += datetime.timedelta(minutes=int(match.group(1)))
    return delta

def get_config_for_fs(fs, config, remote=''):
    fs_config = DEFAULT_CONFIG.copy()
    fs_build = ''
    for fs_part in fs.split('/'):
        fs_build += fs_part
        section = "{}@{}".format(fs_build, remote)
        if section in config:
            fs_config.update(config[section])
        if fs_build == fs:
            break
        fs_build += '/'

    return fs_config


def do_snapshots(fslist, snapshots, config, sudo, remote=None, zfs_cmd=None):
    failed_snapshots = set()
    now = datetime.datetime.now()
    log = logging.getLogger(LOGGER)
    if not remote:
        remote = ''

    for fs in fslist:
        conf = get_config_for_fs(fs, config, remote=remote)
        if not conf['snapshot_interval']:
            continue

        interval = str_to_timedelta(conf['snapshot_interval'])
        if fs in snapshots and snapshots[fs] and snapshots[fs][0]:
            last_snap = snapshots[fs][0]
        else:
            last_snap = datetime.datetime.min
        if interval > datetime.timedelta() and last_snap+interval < now:
            try:
                if zfs_cmd:
                    zsnaplib.create_snapshot(fs, sudo, zfs_cmd=zfs_cmd)
                    log.info('{} snapshot created on {}'.format(fs, remote))
                else:
                    zsnaplib.create_snapshot(fs, sudo)
                    log.info('{} snapshot created'.format(fs))
            except zsnaplib.ZFSSnapshotError as e:
                log.warning(e)
                failed_snapshots.add(fs)
    return failed_snapshots

def get_remote_hosts(config):
    ret = {}
    for section in config.sections():
        if '@' in section and 'remote_zfs_cmd' in config[section]:
            fs, remote = section.split('@', 1)
            remote_zfs_cmd = Template(config[section]['remote_zfs_cmd']).safe_substitute(config[section])
            remote_zfs_cmd = remote_zfs_cmd.split()
            ret[remote] = remote_zfs_cmd
    return ret


def send_snapshots(fslist, snapshots, config, sudo):
    failed_snapshots = set()
    remote_hosts = {}
    remote_targets = {}
    log = logging.getLogger(LOGGER)
    for fs in fslist:
        conf = get_config_for_fs(fs, config)
        remote_snapshots = None
        if not conf['remote_enable']:
            continue
        if conf['remote_test_cmd'] and not remote_is_available(conf):
            failed_snapshots.add(fs)
            continue

        repl_mode = conf['remote_enable']
        remote_fs = conf['remote_zfs_target']
        send_opts = []
        recv_opts = []
        if conf['remote_send_flags']:
            send_opts = conf['remote_send_flags'].split()
        if conf['remote_recv_flags']:
            recv_opts = conf['remote_recv_flags'].split()

        rel_local = [k for k, v in remote_targets.items() if v == remote_fs]
        if rel_local:
            rel_local = rel_local[0]
            rel_fs = fs[len(rel_local):]
            remote_fs = '{}{}'.format(remote_fs, rel_fs)
        remote_targets[fs] = remote_fs

        # Figure out the state of remote zfs
        remote_zfs_cmd = Template(conf['remote_zfs_cmd']).safe_substitute(conf)
        remote_zfs_cmd = remote_zfs_cmd.split()
        # to avoid running too many commands on remote host, save result if we
        # know which host we're working with.
        if 'remote_host' in conf:
            if conf['remote_host'] in remote_hosts:
                remote_snapshots = remote_hosts[conf['remote_host']]
            else:
                remote_snapshots = zsnaplib.get_snapshots(zfs_cmd=remote_zfs_cmd)
                remote_hosts[conf['remote_host']] = remote_snapshots
        if not remote_snapshots:
            remote_snapshots = zsnaplib.get_snapshots(zfs_cmd=remote_zfs_cmd)

        if remote_fs not in remote_snapshots:
            # Remote FS doesn't exist, send a new copy
            log.info('{} sending base copy to {}'.format(fs, ' '.join(remote_zfs_cmd)))
            # oldest snapshot is base_snap if repl_mode != latest
            base_snap = snapshots[fs][-1]
            if repl_mode == 'latest':
                base_snap = snapshots[fs][0]
            try:
                zsnaplib.send_snapshot(
                        fs, 
                        base_snap, 
                        remote_zfs_cmd,
                        remote_fs,
                        sudo=sudo,
                        send_opts=send_opts,
                        recv_opts=recv_opts)
                log.info('{} base copy sent'.format(fs))
            except zsnaplib.ZFSSnapshotError as e:
                failed_snapshots.add(fs)
                log.warning(e)
                continue
            remote_snapshots[remote_fs] = [base_snap]

        # Remote FS now exists, one way or another find last common snapshot
        last_remote = None
        for remote_snap in remote_snapshots[remote_fs]:
            if remote_snap in snapshots[fs]:
                last_remote = remote_snap
                break
        if not last_remote:
            failed_snapshots.add(fs)
            log.warning('{}: No common snapshot local and remote, you need to create a new base copy!'.format(fs))
            continue
        last_local = snapshots[fs][0]
        if last_remote == last_local:
            log.info("{} snapshot from {} is already present on remote".format(fs, last_local))
            continue

        log.info('{} incremental {} -> {}, remote is {}'.format(fs, last_remote, snapshots[fs][0], ' '.join(remote_zfs_cmd)))
        try:
            zsnaplib.send_snapshot(
                    fs, 
                    snapshots[fs][0], 
                    remote_zfs_cmd, 
                    remote_fs,
                    sudo=sudo, 
                    send_opts=send_opts,
                    recv_opts=recv_opts,
                    repl_from=last_remote,
                    repl_mode=repl_mode)
            log.info('{} successfully sent to remote'.format(fs))
        except zsnaplib.ZFSSnapshotError as e:
            log.warning(e)
    return failed_snapshots

def weed_snapshots(fslist, snapshots, config, sudo, failed_snapshots):
    log = logging.getLogger(LOGGER)
    for fs in fslist:
        conf = get_config_for_fs(fs, config)
        if fs in failed_snapshots:
            log.info("Not weeding {} because of snapshot creation/send failure".format(fs))
            continue
        if fs not in snapshots:
            continue
        if not conf['weed_enable']:
            continue

        kwargs = {k: int(v) for k, v in conf.items() if k in [
                'keep_custom',
                'keep_yearly',
                'keep_monthly',
                'keep_weekly',
                'keep_daily',
                'keep_hourly',
                'keep_30min',
                'keep_15min',
                'keep_5min',
                'keep_1min']}
        if conf['custom_keep_interval']:
            kwargs['custom_keep_interval'] = str_to_timedelta(conf['custom_keep_interval'])
        kwargs['sudo'] = sudo

        zsnaplib.weed_snapshots(
                fs,
                # never remove the latest snapshot 
                snapshots[fs][1:],
                **kwargs)


def main():
    config = configparser.SafeConfigParser()
    config.read('/etc/zsnapper.ini')
    sudo = False
    ret = RET_CODES['SUCCESS']
    log = logging.getLogger(LOGGER)

    if os.getuid() != 0:
        sudo = True
    
    fslist = sorted(zsnaplib.get_filesystems(sudo))
    snapshots = zsnaplib.get_snapshots(sudo)
    
    failed_snapshots = do_snapshots(fslist, snapshots, config, sudo)
    if failed_snapshots:
        ret = RET_CODES['ERROR']

    lockfile = '/tmp/zsnapper.pid'
    # This loop should run at most twice
    while True:
        try:
            lockfd = os.open(lockfile, os.O_CREAT|os.O_EXCL|os.O_WRONLY, mode=0o640)
            os.write(lockfd, "{}".format(os.getpid()).encode('utf-8'))
            os.close(lockfd)
            break
        except OSError:
            pass

        # lock file exists, check if the pid seems valid
        with open(lockfile, 'r') as f:
            pid = f.read()
        try:
            pid = int(pid)
            os.kill(pid, 0)
            # If we got here the lock is owned by an existing pid
            log.info('Previous run is not completed yet, will not send or weed snapshots')
            return ret
        except OSError:
            # pid is not running, forcing unlock
            os.remove(lockfile)
        except ValueError:
            log.error('lockfile {} exists but does not seem to contain a pid. Will not continue'.format(lockfile))
            return RET_CODES['FAILED']

    # create any remote snapshots
    remotes = get_remote_hosts(config)
    remote_fs = {}
    remote_snapshots = {}
    failed_remote_snapshots = {}
    for remote, zfs_cmd in remotes.items():
        try:
            remote_fs[remote] = sorted(zsnaplib.get_filesystems(zfs_cmd=zfs_cmd))
            remote_snapshots[remote] = zsnaplib.get_snapshots(zfs_cmd=zfs_cmd)
            failed_remote_snapshots[remote] = do_snapshots(
                    remote_fs[remote],
                    remote_snapshots[remote],
                    config,
                    False, # sudo should be configured in zfs_cmd already
                    remote=remote,
                    zfs_cmd=zfs_cmd)
        except zsnaplib.ZFSSnapshotError:
            if remote in remote_fs:
                del remote_fs[remote]
            if remote in remote_snapshots:
                del remote_snapshots[remote]
            log.warning("Failed to snapshot on {}".format(remote))
            ret = RET_CODES['ERROR']

    for remote, filesystems in failed_remote_snapshots.items():
        for fs in filesystems:
            log.warning("Failed to snapshot {} on {}".format(fs, remote))

    # reload all snapshots so we get our new snapshots here
    for remote, zfs_cmd in remotes.items():
        try:
            if remote in remote_snapshots:
                remote_snapshots[remote] = zsnaplib.get_snapshots(zfs_cmd=zfs_cmd)
        except zsnaplib.ZFSSnapshotError:
            del remote_snapshots[remote]
            log.warning("Could not refresh snapshots on {}".format(remote))

    snapshots = zsnaplib.get_snapshots(sudo)
    failed_send = send_snapshots(fslist, snapshots, config, sudo)
    if failed_send:
        ret = RET_CODES['ERROR']

    failed_snapshots.update(failed_send)
    weed_snapshots(fslist, snapshots, config, sudo, failed_snapshots)
    os.remove(lockfile)

if __name__ == '__main__':
    log = logging.getLogger(LOGGER)
    log.setLevel(logging.INFO)
    handler = logging.StreamHandler()
    handler.setLevel(logging.WARNING)
    log.addHandler(handler)

    handler = logging.handlers.SysLogHandler(address='/dev/log')
    formatter = logging.Formatter(fmt='zsnapper[%(process)s] %(message)s')
    handler.setFormatter(formatter)
    handler.setLevel(logging.INFO)
    log.addHandler(handler)
    sys.exit(main())
